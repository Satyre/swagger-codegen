/**
* Atlas API Reference
*
* OpenAPI spec version: dev
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package fr.vestiairecollective.network.redesign.api

import fr.vestiairecollective.network.redesign.model.*
import io.reactivex.Single
import retrofit2.http.*

interface ContentsService {

    /**
    * Homepage categories
    * Returns a list of categories for the homepage
    * @return Single<ContentsCategoriesResponse>
    */
	@GET("contents/categories")
    fun getCategories(): Single<ContentsCategoriesResponse>
    /**
    * Get customer care Info
    * Retrieve customer care info 
    * @return Single<ContentsCustomerCareResponse>
    */
	@GET("contents/customer-care")
    fun getCustomerCare(): Single<ContentsCustomerCareResponse>
    /**
    * Get deeplink for an url
    * get deeplink related for an url
    * @param url url to translate to deeplink 
    * @return Single<ContentDeeplinkResponse>
    */
	@GET("contents/deeplink/{url}")
    fun getDeeplink(@Path("url") url: String): Single<ContentDeeplinkResponse>
    /**
    * Editorial crush
    * Returns editorial-crush block for homepage
    * @return Single<ContentsEditorialCrushResponse>
    */
	@GET("contents/editorial-crush")
    fun getEditorialCrush(): Single<ContentsEditorialCrushResponse>
    /**
    * Get editorial post list
    * Retrieve the last editorial posts
    * @param limit Post number limit 
    * @return Single<ContentEditorialListResponse>
    */
	@GET("contents/editorial-list")
    fun getEditorialList(@Query("limit") limit: String): Single<ContentEditorialListResponse>
    /**
    * Main merchandizing
    * Returns main-merchandizing block for homepage
    * @return Single<ContentsMainMerchandizingResponse>
    */
	@GET("contents/main-merchandizing")
    fun getMainMerchandizing(): Single<ContentsMainMerchandizingResponse>
    /**
    * Retrieve the welcome voucher
    * Returns the welcome voucher if signed-in user is eligible to the welcome program. The welcome voucher is related to the site and is only allowed for first purchasing customers. 
    * @return Single<WelcomeVoucherResponse>
    */
	@GET("contents/welcome-voucher")
    fun getOfflineWelcomeVoucher(): Single<WelcomeVoucherResponse>
    /**
    * Get content for a page by its ID with the cms project
    * Get content for a page by its ID with the cms project 
    * @param pageId url of a page ( not of type home ) to retrieve in cms 
    * @param xDeviceBrand brand of the device being used ( ios || android || other ) 
    * @param xDeviceType type of the device ( smartphone || desktop || tablet ) 
    * @param xSupportType suppport being used ( app || web ) 
    * @param xLangCode lang being used ( fr_fr || en_en || de_de ... ) 
    * @param xCountry country selected ( FR || EN || UK ... ) 
    * @param version  (optional)
    * @return Single<ContentPageTypeResponse>
    */
	@GET("contents/cms/pages/{pageId}")
    fun getPageIdContent(@Path("pageId") pageId: String, @Query("version") version: String? = null): Single<ContentPageTypeResponse>
    /**
    * Get content for a page type with the cms project
    * Get content for a page type with the cms project 
    * @param pageType page type to retrieve 
    * @param xDeviceBrand brand of the device being used ( ios || android || other ) 
    * @param xDeviceType type of the device ( smartphone || desktop || tablet ) 
    * @param xSupportType suppport being used ( app || web ) 
    * @param xLangCode lang being used ( fr_fr || en_en || de_de ... ) 
    * @param xCountry country selected ( FR || EN || UK ... ) 
    * @param version  (optional)
    * @return Single<ContentPageTypeResponse>
    */
	@GET("contents/cms/pages/type/{pageType}")
    fun getPageTypeContent(@Path("pageType") pageType: String, @Query("version") version: String? = null): Single<ContentPageTypeResponse>
    /**
    * Get content for a page type with the cms project
    * Get content for a page type with the cms project 
    * @param pageUrl url of a page ( not of type home ) to retrieve in cms 
    * @param xDeviceBrand brand of the device being used ( ios || android || other ) 
    * @param xDeviceType type of the device ( smartphone || desktop || tablet ) 
    * @param xSupportType suppport being used ( app || web ) 
    * @param xLangCode lang being used ( fr_fr || en_en || de_de ... ) 
    * @param xCountry country selected ( FR || EN || UK ... ) 
    * @param version  (optional)
    * @return Single<ContentPageTypeResponse>
    */
	@GET("contents/cms/pages/url/{pageUrl}")
    fun getPageUrlContent(@Path("pageUrl") pageUrl: String, @Query("version") version: String? = null): Single<ContentPageTypeResponse>
    /**
    * List payment methods
    * Returns list of accepted payment methods for the currently selected site, currency and country. 
    * @param limit This is the maximum number of objects that may be returned. (optional, default to 10)
    * @param offset This offsets the start of each page by the number specified. (optional, default to 0)
    * @return Single<PaymentMethodListResponse>
    */
	@GET("contents/payment-methods")
    fun getPaymentMethods(@Query("limit") limit: Int? = null, @Query("offset") offset: Int? = null): Single<PaymentMethodListResponse>
    /**
    * Get helps information on shipping cost and customer fees
    * Retrieve shipping cost info and customer fees 
    * @return Single<ReinsuranceMoreInformationResponse>
    */
	@GET("contents/reinsurance")
    fun getReinsurance(): Single<ReinsuranceMoreInformationResponse>
    /**
    * Single edito
    * Returns single-edito block for homepage
    * @return Single<ContentsSingleEditoResponse>
    */
	@GET("contents/single-edito")
    fun getSingleEdito(): Single<ContentsSingleEditoResponse>
    /**
    * List catalog pages
    * Returns a list of catalog pages for given path. 
    * @param path Page path 
    * @return Single<ContentsCatalogPageResponse>
    */
	@GET("contents/catalog-pages")
    fun listCatalogPages(@Query("path") path: String): Single<ContentsCatalogPageResponse>
    /**
    * Get promotional banners
    * Returns the active promotional banners for current site and locale. 
    * @return Single<PromotionalBannerResponse>
    */
	@GET("contents/promotional-banners")
    fun listPromotionalBanners(): Single<PromotionalBannerResponse>
    /**
    * List type size
    * Returns list type size by sub category 
    * @param idSubcategory Type Size Path 
    * @return Single<ContentsTypeSize>
    */
	@GET("contents/type-size")
    fun listTypeSize(@Query("idSubcategory") idSubcategory: String): Single<ContentsTypeSize>
}
