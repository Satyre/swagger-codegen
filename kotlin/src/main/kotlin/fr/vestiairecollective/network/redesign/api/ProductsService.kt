/**
* Atlas API Reference
*
* OpenAPI spec version: dev
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package fr.vestiairecollective.network.redesign.api

import fr.vestiairecollective.network.redesign.model.*
import io.reactivex.Single
import retrofit2.http.*

interface ProductsService {

    /**
    * Add photo to a product
    * Add a photo to an existing product
    * @param id Id of the product 
    * @param payload  (optional)
    * @return Single<InlineResponse201>
    */
	@POST("products/{id}/photo")
    fun addPhotoProduct(@Path("id") id: String, @Body payload: ArrayLessThanByteGreaterThan? = null): Single<InlineResponse201>
    /**
    * Start a new negotiation
    * 
    * @param productId Product 
    * @param payload  (optional)
    * @return Single<NegotiationResponse>
    */
	@POST("products/{productId}/negotiations")
    fun createNegotiation(@Path("productId") productId: String, @Body payload: NegotiationRequest? = null): Single<NegotiationResponse>
    /**
    * Add a comment on a product
    * 
    * @param productId The id of a product 
    * @param payload Comment of a product (optional)
    * @return Single<CommentResponse>
    */
	@POST("products/{productId}/comments")
    fun createProductComment(@Path("productId") productId: String, @Body payload: CommentForm? = null): Single<CommentResponse>
    /**
    * Product Price drop unfollow
    * 
    * @param productId Product ID 
    * @return void
    */
	@DELETE("products/{productId}/price-drop-alerts")
    fun deletePriceDrop(@Path("productId") productId: String): Single<EmptyResponse>
    /**
    * Returns the active negotiation for currently signed-in buyer.
    * Returns the active negotiation for currently signed-in buyer.
    * @param productId Product 
    * @param withEvents If true, returns events (optional, default to false)
    * @return Single<NegotiationResponse>
    */
	@GET("products/{productId}/active-negotiation")
    fun getActiveNegotiation(@Path("productId") productId: String, @Query("withEvents") withEvents: Boolean? = null): Single<NegotiationResponse>
    /**
    * Returns a single product
    * 
    * @param id Id of the product to retrieve 
    * @param isoCountry iso country for installment (optional)
    * @return Single<ProductResponse>
    */
	@GET("products/{id}")
    fun getProduct(@Path("id") id: String, @Query("isoCountry") isoCountry: String? = null): Single<ProductResponse>
    /**
    * Get product condition levels
    * Returns a list of condition levels for a product. 
    * @param id The Id of product for which to get condition levels. 
    * @return Single<ProductConditionDetailsResponse>
    */
	@GET("products/{id}/condition-details")
    fun getProductConditionDetails(@Path("id") id: String): Single<ProductConditionDetailsResponse>
    /**
    * Check product reservation status
    * A product can be reserved either manually by a premium member or automatically following a successful negotiation. 
    * @param id Id of the product to be checked 
    * @return Single<ProductReservationResponse>
    */
	@GET("products/{id}/reservation")
    fun getProductReservation(@Path("id") id: String): Single<ProductReservationResponse>
    /**
    * Get product shipping information
    * 
    * @param id The id of a product 
    * @param isoCountry country iso code 
    * @return Single<ShippingResponse>
    */
	@GET("products/{id}/shippings")
    fun getProductShippingInformation(@Path("id") id: String, @Query("isoCountry") isoCountry: String): Single<ShippingResponse>
    /**
    * Return shipping voucher path of sold product
    * Return shipping voucher path of sold product
    * @param id Product Id 
    * @return Single<ShippingVoucherResponse>
    */
	@GET("products/{id}/shipping-voucher")
    fun getShippingVoucher(@Path("id") id: String): Single<ShippingVoucherResponse>
    /**
    * Like a product
    * 
    * @param id Product to like Id 
    * @return void
    */
	@POST("products/{id}/likes")
    fun likeProduct(@Path("id") id: String): Single<EmptyResponse>
    /**
    * List associated products
    * Returns associated products (To wear with)
    * @param id Product Id 
    * @param limit This is the maximum number of objects that may be returned. (optional, default to 10)
    * @param offset This offsets the start of each page by the number specified. (optional, default to 0)
    * @return Single<ProductListResponse>
    */
	@GET("products/{id}/associated-products")
    fun listAssociatedProducts(@Path("id") id: String, @Query("limit") limit: Int? = null, @Query("offset") offset: Int? = null): Single<ProductListResponse>
    /**
    * List a product comments
    * Returns a list of comment for a given product
    * @param productId Product ID 
    * @param limit This is the maximum number of objects that may be returned. (optional, default to 10)
    * @param offset This offsets the start of each page by the number specified. (optional, default to 0)
    * @return Single<CommentListResponse>
    */
	@GET("products/{productId}/comments")
    fun listProductComents(@Path("productId") productId: String, @Query("limit") limit: Int? = null, @Query("offset") offset: Int? = null): Single<CommentListResponse>
    /**
    * List similar products
    * 
    * @param id Product Id 
    * @param limit This is the maximum number of objects that may be returned. (optional, default to 10)
    * @param offset This offsets the start of each page by the number specified. (optional, default to 0)
    * @return Single<ProductListResponse>
    */
	@GET("products/{id}/similar-products")
    fun listSimilarProducts(@Path("id") id: String, @Query("limit") limit: Int? = null, @Query("offset") offset: Int? = null): Single<ProductListResponse>
    /**
    * Report a product
    * 
    * @param id The id of a product to report 
    * @param typeId item type for the report (optional)
    * @param payload Report message (optional)
    * @return Single<ProductReportResponse>
    */
	@POST("products/{id}/reports")
    fun reportProduct(@Path("id") id: String, @Query("typeId") typeId: String? = null, @Body payload: ProductReport? = null): Single<ProductReportResponse>
    /**
    * translate a description
    * Returns a description translation
    * @param productId Product ID 
    * @return Single<ProductTranslationResponse>
    */
	@GET("products/{productId}/translation")
    fun translateProduct(@Path("productId") productId: String): Single<ProductTranslationResponse>
    /**
    * translate a comment
    * Returns a comment translation
    * @param commentId Comment ID 
    * @param productId Product ID 
    * @return Single<CommentsTranslationResponse>
    */
	@GET("products/{productId}/comments/{commentId}/translation")
    fun translation(@Path("commentId") commentId: String, @Path("productId") productId: String): Single<CommentsTranslationResponse>
    /**
    * Unlike a product
    * 
    * @param id Product to dislike Id 
    * @return void
    */
	@DELETE("products/{id}/likes")
    fun unlikeProduct(@Path("id") id: String): Single<EmptyResponse>
}
