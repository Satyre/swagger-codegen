/**
* Atlas API Reference
*
* OpenAPI spec version: dev
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package fr.vestiairecollective.network.redesign.api

import fr.vestiairecollective.network.redesign.model.*
import io.reactivex.Single
import retrofit2.http.*

interface UsersService {

    /**
    * Add product to wishlist
    * 
    * @param payload Product ID to add to wishlist (optional)
    * @return Single<EmptyResponse>
    */
	@POST("users/me/wishlist")
    fun addProductToWishlist(@Body payload: WishlistAddRequest? = null): Single<EmptyResponse>
    /**
    * Follow a user
    * 
    * @param id The Id of the user to follow 
    * @return Single<EmptyResponse>
    */
	@POST("users/{id}/followers")
    fun follow(@Path("id") id: String): Single<EmptyResponse>
    /**
    * Get notification, wishlist ... count for header display
    * 
    * @return Single<CounterResponse>
    */
	@GET("users/me/counters")
    fun getCounters(): Single<CounterResponse>
    /**
    * List followers of a user
    * Returns a list of users who are following the specified user.  You can list user who are following the authenticated user using the &#x60;me&#x60; special key. &#x60;&#x60;&#x60; GET /users/me/followers/ &#x60;&#x60;&#x60; 
    * @param id The Id of the user for whom to return results. 
    * @return Single<UserSocialResponse>
    */
	@GET("users/{id}/followers")
    fun getFollowers(@Path("id") id: String): Single<UserSocialResponse>
    /**
    * Liked items
    * Returns the liked items as an array for type id 
    * @return Single<LikedItemsResponse>
    */
	@GET("users/me/likes")
    fun getLikes(): Single<LikedItemsResponse>
    /**
    * Members follow
    * Returns products ids of members follows 
    * @param id ID of the user 
    * @return Single<UserFollowResponse>
    */
	@GET("users/{id}/member-follows")
    fun getMemberFollows(@Path("id") id: String): Single<UserFollowResponse>
    /**
    * Get user&#39;s own counters
    * 
    * @return Single<OwnCounterResponse>
    */
	@GET("users/me/products/count")
    fun getOwnCounters(): Single<OwnCounterResponse>
    /**
    * Get users products waiting more information
    * returns users products waiting for more informations 
    * @return Single<ProductListResponse1>
    */
	@GET("users/me/products/curation/information")
    fun getOwnProductsCurationInformation(): Single<ProductListResponse1>
    /**
    * Get users products with open mmao
    * priceDrop: return users products with open negotiation 
    * @return Single<ProductListResponse1>
    */
	@GET("users/me/products/curation/negotiation")
    fun getOwnProductsCurationNegotiation(): Single<ProductListResponse1>
    /**
    * Get users products waiting new photos
    * returns users products waiting for new photos 
    * @return Single<ProductListResponse1>
    */
	@GET("users/me/products/curation/picture")
    fun getOwnProductsCurationPicture(): Single<ProductListResponse1>
    /**
    * Get users products refused by vestiaire
    * returns users products refused by vestiaire 
    * @return Single<ProductListResponse1>
    */
	@GET("users/me/products/curation-refused")
    fun getOwnProductsCurationRefused(): Single<ProductListResponse1>
    /**
    * Get users products waiting validation from vestiaire
    * returns users products waiting validation from vestiaire 
    * @return Single<ProductListResponse1>
    */
	@GET("users/me/products/curation/validation")
    fun getOwnProductsCurationValidation(): Single<ProductListResponse1>
    /**
    * Get users products expired
    * returns users products expired 
    * @return Single<ProductListResponse1>
    */
	@GET("users/me/products/expired")
    fun getOwnProductsExpired(): Single<ProductListResponse1>
    /**
    * Get users products on sale
    * returns users products on sale 
    * @return Single<ProductListResponse1>
    */
	@GET("users/me/products/on-sale")
    fun getOwnProductsOnSale(): Single<ProductListResponse1>
    /**
    * Get users products with picture in treatment
    * returns users with picture in treatment 
    * @return Single<ProductListResponse1>
    */
	@GET("users/me/products/picture-cutoff")
    fun getOwnProductsPictureCutoff(): Single<ProductListResponse1>
    /**
    * Get users products on price drop
    * returns users products on price drop 
    * @return Single<ProductListResponse1>
    */
	@GET("users/me/products/price-drop")
    fun getOwnProductsPriceDrop(): Single<ProductListResponse1>
    /**
    * Get users products with price offer received
    * returns users products which have been received offer price 
    * @return Single<ProductListResponse1>
    */
	@GET("users/me/products/price-offer-received")
    fun getOwnProductsPriceOfferReceived(): Single<ProductListResponse1>
    /**
    * Get users products removed
    * returns users products removed by himself 
    * @return Single<ProductListResponse1>
    */
	@GET("users/me/products/sale-removed")
    fun getOwnProductsSaleRemoved(): Single<ProductListResponse1>
    /**
    * Get users products solded
    * returns solded users products 
    * @return Single<ProductListResponse1>
    */
	@GET("users/me/products/sold")
    fun getOwnProductsSold(): Single<ProductListResponse1>
    /**
    * Get users products unreceived by vestiaire
    * returns users products unreceived by vestiaire 
    * @return Single<ProductListResponse1>
    */
	@GET("users/me/products/unreceived")
    fun getOwnProductsUnreceived(): Single<ProductListResponse1>
    /**
    * Price drop follow
    * Returns products ids of price drop followed 
    * @return Single<PriceDropResponse>
    */
	@GET("users/me/price-drop-alerts")
    fun getPriceDrop(): Single<PriceDropResponse>
    /**
    * Retrieve a single user
    * Returns public info about a single user
    * @param id ID of the user 
    * @return Single<UserResponse1>
    */
	@GET("users/{id}")
    fun getUser(@Path("id") id: String): Single<UserResponse1>
    /**
    * Returns settings
    * Returns settings for the authenticating user.
    * @return Single<I18nResponse>
    */
	@GET("users/me/settings")
    fun getUserSettings(): Single<I18nResponse>
    /**
    * List recently viewed products
    * 
    * @param id ID of the user 
    * @param limit This is the maximum number of objects that may be returned. (optional, default to 10)
    * @param offset This offsets the start of each page by the number specified. (optional, default to 0)
    * @return Single<ProductListResponse>
    */
	@GET("users/{id}/viewed-products")
    fun getViewedProducts(@Path("id") id: String, @Query("limit") limit: Int? = null, @Query("offset") offset: Int? = null): Single<ProductListResponse>
    /**
    * Retrieve current user&#39;s wallet
    * 
    * @return Single<WalletResponse>
    */
	@GET("users/me/wallet")
    fun getWallet(): Single<WalletResponse>
    /**
    * Retrieve the welcome voucher
    * Returns the welcome voucher if signed-in user is eligible to the welcome program. The welcome voucher is related to the site and is only allowed for first purchasing customers. 
    * @return Single<WelcomeVoucherResponse>
    */
	@GET("users/me/welcome-voucher")
    fun getWelcomeVoucher(): Single<WelcomeVoucherResponse>
    /**
    * user wishes product
    * Returns products ids of user wishlist 
    * @return Single<WishesResponse>
    */
	@GET("users/me/wishes")
    fun getWishesProduct(): Single<WishesResponse>
    /**
    * Returns user&#39;s wishlist
    * 
    * @param id ID of the user 
    * @param order Result order (optional, default to date)
    * @param limit This is the maximum number of objects that may be returned. (optional, default to 10)
    * @param offset This offsets the start of each page by the number specified. (optional, default to 0)
    * @return Single<ProductListResponse>
    */
	@GET("users/{id}/wishlist")
    fun getWishlist(@Path("id") id: String, @Query("order") order: String? = null, @Query("limit") limit: Int? = null, @Query("offset") offset: Int? = null): Single<ProductListResponse>
    /**
    * Returns user&#39;s liked product list
    * 
    * @param id ID of the user 
    * @param limit This is the maximum number of objects that may be returned. (optional, default to 10)
    * @param offset This offsets the start of each page by the number specified. (optional, default to 0)
    * @return Single<ProductListResponse>
    */
	@GET("users/{id}/liked-products")
    fun listLikeProduct(@Path("id") id: String, @Query("limit") limit: Int? = null, @Query("offset") offset: Int? = null): Single<ProductListResponse>
    /**
    * Register a new user
    * 
    * @param payload Registration form data (optional)
    * @return Single<SessionResponse>
    */
	@POST("users")
    fun registerUser(@Body payload: UserCreate? = null): Single<SessionResponse>
    /**
    * Remove product from wishlist
    * 
    * @param idProduct Product ID to remove from wishlist 
    * @return void
    */
	@DELETE("users/me/wishlist/{idProduct}")
    fun removeProductFromWishlist(@Path("idProduct") idProduct: String): Single<EmptyResponse>
    /**
    * Unfollow a user
    * 
    * @param id The Id of the user to unfollow 
    * @return void
    */
	@DELETE("users/{id}/followers/me")
    fun unfollow(@Path("id") id: String): Single<EmptyResponse>
    /**
    * Update settings
    * Updates the authenticated user&#39;s settings.
    * @param payload User&#39;s settings (optional)
    * @return Single<I18nResponse>
    */
	@PATCH("users/me/settings")
    fun updateUserSettings(@Body payload: I18n? = null): Single<I18nResponse>
}
